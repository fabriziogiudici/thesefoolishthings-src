#*
 * *********************************************************************************************************************
 *
 * TheseFoolishThings: Miscellaneous utilities
 * http://tidalwave.it/projects/thesefoolishthings
 *
 * Copyright (C) 2009 - 2023 by Tidalwave s.a.s. (http://tidalwave.it)
 *
 * *********************************************************************************************************************
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * *********************************************************************************************************************
 *
 * git clone https://bitbucket.org/tidalwave/thesefoolishthings-src
 * git clone https://github.com/tidalwave-it/thesefoolishthings-src
 *
 * *********************************************************************************************************************
 *#
#set ($project_cc = $context.get("tidalwave.ci.view"))
#set ($project_lc = ${project_cc.toLowerCase()})
#set ($build_status = "https://img.shields.io/jenkins/s/http/services.tidalwave.it/ci/job/" + $project_cc + "_Build_from_Scratch.svg")
#set ($ci_view = "http://services.tidalwave.it/ci/job/" + $project_cc)
#set ($test_status = "https://img.shields.io/jenkins/t/http/services.tidalwave.it/ci/job/" + $project_cc + ".svg")
#set ($coverage_status = "https://img.shields.io/jenkins/c/http/services.tidalwave.it/ci/job/" + $project_cc + ".svg")

[![Maven Central](https://img.shields.io/maven-central/v/${project.groupId}/thesefoolishthings.svg)]()
[![Build Status]($build_status)]($ci_view)
[![Test Status]($test_status)]($ci_view)
[![Coverage]($coverage_status)]($ci_view)


#[[##]]# Introduction

${project.description}

The project is composed of mostly independent modules, with different levels of stability and internal quality. At the moment there is not
an automatic system to check the compatibility of the APIs from version to version; in general look at the following Javadoc tags:

+ **stable**: to designate things with a certain degree of maturity.
+ **draft**: to designate things that are going to stabilise;
+ **experimental**: to designate things that are really raw and might go away soon, or perhaps mutate dramatically;

${project.name} is **licensed** with the Apache license.


#[[##]]# A quick look

Here it is a quick look at some of the available features.

#[[###]]# `Pair` and `Triple`

`Pair` and `Triple` are implementations of 2 and 3-elements tuples. They are pretty useful in `Stream` programming, for instance offering a way to
implement nested loops:

<!-- MACRO{snippet|id=loop2a|file=${project.basedir}/modules/Utilities/src/test/java/it/tidalwave/util/TripleTest.java} -->

... or indexed loops:

<!-- MACRO{snippet|id=loop2a|file=${project.basedir}/modules/Utilities/src/test/java/it/tidalwave/util/PairTest.java} -->


#[[###]]# `Finder`

`Finder` is a query builder with a fluent API that allows to access collections of data from a variety of data sources. It offers features such as pagination
and composition. Its API is extensible, so a variety of filtering criteria and query parameters can be specified. Notwithstanding the apparent similarity
with `Stream`s, it is quite different since it supports not only in-memory operations; for instance, implementations can query a database by generating ad-hoc
SQL, so data are retrieved in the most efficient way.

<!-- MACRO{snippet|id=extended-example|file=${project.basedir}/modules/examples/ExtendedFinderExample/src/main/java/it/tidalwave/thesefoolishthings/examples/extendedfinderexample/FinderExample2.java} -->


#[[###]]# `As`

`As` provides a dynamic implementation of the **Data, Context and Interaction** architectural pattern â€” dynamic in the sense that classes providing interaction
support can be associated to existing objects. For instance, in the following code `Displayable` and `Renderable` are not known to the model class `Person`,
but they are available at runtime in association with that class to provide extended functions:

<!-- MACRO{snippet|id=extensionmethod|file=${project.basedir}/modules/examples/DciDisplayableExample/src/main/java/it/tidalwave/thesefoolishthings/examples/dci/displayable/DisplayableExample.java} -->


#[[###]]# P&S MessageBus

>PENDING INTRODUCTION AND EXAMPLE


#[[###]]# Collaborative Actors

>PENDING INTRODUCTION AND EXAMPLE


#[[###]]# Type-safe maps

>PENDING INTRODUCTION AND EXAMPLE


#[[##]]# Modules

+ [Utilities](modules/it-tidalwave-util/index.html)             [(Javadoc)](modules/it-tidalwave-util/apidocs/index.html)

+ [Roles](modules/it-tidalwave-role/index.html)                 [(Javadoc)](modules/it-tidalwave-role/apidocs/index.html)

+ [Test Utilities](modules/it-tidalwave-util-test/index.html)   [(Javadoc)](modules/it-tidalwave-util-test/apidocs/index.html)

+ [MessageBus](modules/it-tidalwave-messagebus/index.html)      [(Javadoc)](modules/it-tidalwave-messagebus/apidocs/index.html)

+ [Actors](modules/it-tidalwave-actor/index.html)               [(Javadoc)](modules/it-tidalwave-actor/apidocs/index.html)


#[[##]]# General information
#[[###]]# Maven dependency

Since most modules can be used independently, Maven dependency information is available in their specific documentation.

#[[###]]# Sources, issue tracker and continuous integration

The primary source repository is on **[Bitbucket]($context.get("scm.repo.browse.url"))**, a secondary repository (synchronized in real time) is available on
**[GitHub]($context.get("tidalwave.github.browse.url"))**.

To checkout sources from Bitbucket:

```shell
> git clone $context.get("scm.repo.readonly.url")
```

To checkout sources from GitHub:

```shell
> git clone $context.get("tidalwave.github.readonly.url")
```

The issue tracker is hosted on the Atlassian Jira Cloud:

+ ${project.issueManagement.url}

The **continuous integration** is available at:

+ Tidalwave CI server (primary): ${project.ciManagement.url}
+ Travis: https://app.travis-ci.com/bitbucket/tidalwave/thesefoolishthings-src
+ Bitbucket pipelines (demonstration only): https://bitbucket.org/tidalwave/thesefoolishthings-src/addon/pipelines/home

#[[###]]# API documentation

[Aggregate Javadoc](apidocs/index.html)

